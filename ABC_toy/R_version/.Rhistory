5e-2*par[2]^3.0 +
9e-2*par[3]^1.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^1.0 +
1e-3*par[2]^2.0 +
4e-3*par[3] +
2e-3*par[4];
val4 <- 2e-4*par[1]^2.5 +
5e-4*par[2]^3.3 +
8e-4*par[3]^2.2 +
8e-4*par[4]
return(c(val1,val2,val3,val4))
}
sumobs <- toy_model(c(34,12,456,78))
sum_stat_obs <- sumobs
toy_prior <- list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000))
n = 1e4
p = 0.2
ABC_rej <-ABC_rejection(model=toy_model, prior=toy_prior, nb_simul=n)
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.1, method="rejection")
rej$unadj.values
plot(rej$unadj.values[,1],type="l")
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.01, method="rejection")
plot(rej$unadj.values[,1],type="l")
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.001, method="rejection")
plot(rej$unadj.values[,1],type="l")
n = 5e4
p = 0.2
ABC_rej <-ABC_rejection(model=toy_model, prior=toy_prior, nb_simul=n)
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.001, method="rejection")
plot(rej$unadj.values[,1],type="l")
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.01, method="rejection")
plot(rej$unadj.values[,1],type="l")
n = 1e6
p = 0.2
ABC_rej <-ABC_rejection(model=toy_model, prior=toy_prior, nb_simul=n)
tolerance=c(1.25,0.75)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
ABC_Beaumont
ABC_Beaumont$param[,1]
hist(ABC_Beaumont$param[,1])
hist(ABC_Beaumont$param[,2])
hist(ABC_Beaumont$param[,23)
hist(ABC_Beaumont$param[,2])
hist(ABC_Beaumont$param[,3])
hist(ABC_Beaumont$param[,4])
tolerance=c(1,0.5)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=5e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
ABC_Beaumont$param[,1]
hist(ABC_Beaumont$param[,1])
sumobs
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.01, method="neuralnet")
plot(rej$unadj.values[,1],type="l")
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.01, method =
"loclinear", transf=c("log","log","log","log"))
plot(rej$unadj.values[,1],type="l")
toy_prior
toy_model <- function(par){
val1 <- 1e-1*par[1] +
2e-1*par[2]^2.0 +
7e-1*par[3] +
4e-1*par[4];
val2 <- 3e-2*par[1]^2.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^1.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^1.0 +
1e-3*par[2]^2.0 +
4e-3*par[3] +
2e-3*par[4];
val4 <- 2e-4*par[1]^2.5 +
5e-4*par[2]^3.3 +
8e-4*par[3]^2.2 +
8e-4*par[4]
return(mean(c(val1,val2,val3,val4)),sd(c(val1,val2,val3,val4)))
}
sumobs <- toy_model(c(34,12,456,78))
sum_stat_obs <- c(mean(sumobs),sd(sumobs))
toy_model(c(34,12,456,78))
toy_model <- function(par){
val1 <- 1e-1*par[1] +
2e-1*par[2]^2.0 +
7e-1*par[3] +
4e-1*par[4];
val2 <- 3e-2*par[1]^2.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^1.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^1.0 +
1e-3*par[2]^2.0 +
4e-3*par[3] +
2e-3*par[4];
val4 <- 2e-4*par[1]^2.5 +
5e-4*par[2]^3.3 +
8e-4*par[3]^2.2 +
8e-4*par[4]
return(mean(c(val1,val2,val3,val4)),sd(c(val1,val2,val3,val4)))
}
toy_model(c(34,12,456,78))
toy_model <- function(par){
val1 <- 1e-1*par[1] +
2e-1*par[2]^2.0 +
7e-1*par[3] +
4e-1*par[4];
val2 <- 3e-2*par[1]^2.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^1.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^1.0 +
1e-3*par[2]^2.0 +
4e-3*par[3] +
2e-3*par[4];
val4 <- 2e-4*par[1]^2.5 +
5e-4*par[2]^3.3 +
8e-4*par[3]^2.2 +
8e-4*par[4]
S1 <- mean(c(val1,val2,val3,val4))
S2 <- sd(c(val1,val2,val3,val4))
return(c(S1 ,S2 ))
}
toy_model(c(34,12,456,78))
sumobs <- toy_model(c(34,12,456,78))
sum_stat_obs <- sumobs
toy_prior <- list(c("unif",1e-1,1000),c("unif",1e-1,1000),
c("unif",1e-1,1000),c("unif",1e-1,1000))
n = 1e4
p = 0.2
ABC_rej <-ABC_rejection(model=toy_model, prior=toy_prior, nb_simul=n)
rej <- abc(sum_stat_obs, ABC_rej$param, ABC_rej$stats, tol=0.01, method =
"loclinear", transf=c("log","log","log","log"))
plot(rej$unadj.values[,1],type="l")
tolerance=c(1,0.5)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
ABC_Beaumont$param[,1]
hist(ABC_Beaumont$param[,1])
tolerance=c(0.75,0.25)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
hist(ABC_Beaumont$param[,1])
toy_prior <- list(c("unif",1e-1,100),c("unif",1e-1,100),
c("unif",1e-1,100),c("unif",1e-1,100))
tolerance=c(0.75,0.25)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
hist(ABC_Beaumont$param[,1])
tolerance=c(0.75,0.25,0.1)
ABC_Beaumont<-ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e5, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
toy_model <- function(par){
val1 <- 1e-1*par[1] +
2e-1*par[2]^2.0 +
7e-1*par[3] +
4e-1*par[4];
val2 <- 3e-2*par[1]^2.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^1.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^1.0 +
1e-3*par[2]^2.0 +
4e-3*par[3] +
2e-3*par[4];
val4 <- 2e-4*par[1]^2.5 +
5e-4*par[2]^3.3 +
8e-4*par[3]^2.2 +
8e-4*par[4]
#S1 <- mean(c(val1,val2,val3,val4))
#S2 <- sd(c(val1,val2,val3,val4))
return(c(log(val1),log(val2),log(val3),log(val4)))
}
toy_model(c(34,12,6,78))
sumobs <- toy_model(c(34,12,6,78))
sum_stat_obs <- sumobs
toy_prior <- list(c("unif",1e-1,100),c("unif",1e-1,100),
c("unif",1e-1,100),c("unif",1e-1,100))
tolerance=c(0.75,0.25,0.1)
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e5\4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
hist(ABC_Beaumont$param[,1])
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=5e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
tolerance=c(0.75,0.25,0.1)
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
hist(ABC_Beaumont$param[,1])
dim(ABC_Beaumont$param)
hist(ABC_Beaumont$param[,1])
hist(ABC_Beaumont$param[,1])
hist(ABC_Beaumont$param[,2])
hist(ABC_Beaumont$param[,3])
hist(ABC_Beaumont$param[,4])
tolerance=c(1,0.75,0.5,0.25,0.1)
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance)
hist(ABC_Beaumont$param[,1])
pdat <- as.data.frame(ABC_Beaumont$param)
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
require(ggplot2)
pdat <- as.data.frame(ABC_Beaumont$param)
ggplot(data = pdat,aes(x = V1,y = V4)) +
geom_density_2d()
ggplot(data = pdat,aes(x = V1,y = V2)) +
geom_density_2d()
10197+600+3100
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance,n_cluster=4)
# Run Sequencial Approximate Bayesian Computation
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e4, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance,n_cluster=4,use_seed=TRUE)
oy_model <- function(par){
val1 <- 1e-1*par[1]^4 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4 +
5e-4*par[2]^3 +
8e-4*par[3]^2 +
8e-4*par[4]
#S1 <- mean(c(val1,val2,val3,val4))
#S2 <- sd(c(val1,val2,val3,val4))
return(c(log(val1),log(val2),log(val3),log(val4)))
}
# Observed data
x1 = 34
x2 = 12
x3 = 456
x4 = 78
obs_data <- toy_model(c(x1,x2,x3,x4))
obs_data
toy_prior <- list(c("unif",1e-1,1e3),c("unif",1e-1,1e3),
c("unif",1e-1,1e3),c("unif",1e-1,1e3))
# Fraction of acceptable data, measured via Euclidian distance between simulation and obs_data
tolerance=c(1,0.75,0.5,0.25,0.1)
ABC_Beaumont <- ABC_sequential(method="Beaumont", model=toy_model,
prior=toy_prior, nb_simul=1e3, summary_stat_target=sum_stat_obs,
tolerance_tab=tolerance,n_cluster=4,use_seed=TRUE)
require(GA)
# Toy programm
# ======================================================================
#   COMPUTE PREDICTED VALUES: BLACK BOX
# ======================================================================
#     the numbers in the following equations are "hidden"
toy_model <- function(par){
val1 <- 1e-1*par[1]^4 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4 +
5e-4*par[2]^3 +
8e-4*par[3]^2 +
8e-4*par[4]
val5 <- 9e-5*par[1]^4 +
6e-5*par[2]^3 +
3e-5*par[3]^2 +
1e-5*par[4]
return(c(val1,val2,val3,val4,val5))
}
toy_model <- cmpfun(toy_model)
# Observed data
x1 = 34
x2 = 12
x3 = 456
x4 = 78
obs_data <- toy_model(c(x1,x2,x3,x4))
# Summary, just the data - no compression
sum_stat_obs <- obs_data
euc.dist <- function(x1, x2) sqrt(sum((log(x1) - log(x2))^2))
mah.dist <- function(x1,x2){
x <- cbind(x1,x2)
mean <- colMeans(x)
Sx <- cov(x)
sqrt(sum(mahalanobis(x,mean,Sx)^2))
}
loss <- function(xx,yy,zz,kk){mah.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 1000, maxiter = 5000)
summary(GA)
plot(GA)
install.packages("GA")
require(GA)
# Toy programm
# ======================================================================
#   COMPUTE PREDICTED VALUES: BLACK BOX
# ======================================================================
#     the numbers in the following equations are "hidden"
toy_model <- function(par){
val1 <- 1e-1*par[1]^4 +
2e-1*par[2]^3.0 +
7e-1*par[3]^2 +
4e-1*par[4];
val2 <- 3e-2*par[1]^4.0 +
5e-2*par[2]^3.0 +
9e-2*par[3]^2.0 +
1e-2*par[4];
val3 <- 7e-3*par[1]^4.0 +
1e-3*par[2]^3.0 +
4e-3*par[3]^2 +
2e-3*par[4];
val4 <- 2e-4*par[1]^4 +
5e-4*par[2]^3 +
8e-4*par[3]^2 +
8e-4*par[4]
val5 <- 9e-5*par[1]^4 +
6e-5*par[2]^3 +
3e-5*par[3]^2 +
1e-5*par[4]
return(c(val1,val2,val3,val4,val5))
}
toy_model <- cmpfun(toy_model)
# Observed data
x1 = 34
x2 = 12
x3 = 456
x4 = 78
obs_data <- toy_model(c(x1,x2,x3,x4))
# Summary, just the data - no compression
sum_stat_obs <- obs_data
euc.dist <- function(x1, x2) sqrt(sum((log(x1) - log(x2))^2))
mah.dist <- function(x1,x2){
x <- cbind(x1,x2)
mean <- colMeans(x)
Sx <- cov(x)
sqrt(sum(mahalanobis(x,mean,Sx)^2))
}
loss <- function(xx,yy,zz,kk){mah.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 1000, maxiter = 5000)
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 1000, maxiter = 500)
summary(GA)
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 1000, maxiter = 500)
summary(GA)
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 1000, maxiter = 500)
summary(GA)
toy_model(c(x1,x2,x3,x4))
xx <- seq(1e-3,1e3,length.out = 1000)
plot(xx,toy_model(c(x1,x2,x3,xx))
plot(xx,toy_model(c(x1,x2,x3,xx)))
plot(xx,toy_model(c(x1,x2,x3,xx)))
toy_model(c(x1,x2,x3,xx)
)
xx
sapply(xx,toy_model(c(x1,x2,x3,xx)))
sapply(toy_model(c(x1,x2,x3,xx)),xx)
f <- functionx(x){toy_model(c(x1,x2,x3,xx))}
f <- functionx(x){toy_model(c(x1,x2,x3,x))}
f <- functionx(x){
toy_model(c(x1,x2,x3,x))
}
f <- functionx(x){
toy_model(c(x1,x2,x3,x))
}
f <- function(x){
toy_model(c(x1,x2,x3,x))
}
f(1)
f <- function(x){
loss(x1,x2,x3,x)
}
f(1)
f(1e-3)
f(1e3)
f(78)
xx <- seq(1e-3,1e3,length.out = 1000)
plot(xx,f(xx))
f(xx)
sapply(xx,f)
xx <- seq(1e-3,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
f <- function(x){
loss(x1,x2,x3,x)
}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
f <- function(x){
loss(x1,x2,x3,x)
}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^3))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
f <- function(x){
loss(x1,x2,x3,x)
}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
xx <- seq(0,1e3,length.out = 1000)
plot(xx,sapply(xx,f))
plot(xx,sapply(xx,f),log="y")
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^1.5))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
f <- function(x){
loss(x1,x2,x3,x)
}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f),log="y")
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^2))
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f),log="y")
f <- function(x){
loss(x1,x2,x3,x)
}
xx <- seq(1e-5,1e3,length.out = 1000)
plot(xx,sapply(xx,f),log="y")
euc.dist <- function(x1, x2) sqrt(sum((x1 - x2)^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 10000, maxiter = 50000)
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 50000, maxiter = 5000)
euc.dist <- function(x1, x2) sqrt(sum((log(x1) - log(x2))^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 50000, maxiter = 5000)
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 50000, maxiter = 5000,ncores=4, numIslands = 4, migrationInterval = 20)
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 50000, maxiter = 5000, optim = TRUE)
euc.dist <- function(x1, x2) sqrt(sum(((x1) - (x2))^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 5000, maxiter = 5000, optim = TRUE)
summary(GA)
euc.dist <- function(x1, x2) sqrt(sum((log(x1) - log(x2))^2))
loss <- function(xx,yy,zz,kk){euc.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 5000, maxiter = 5000, optim = TRUE)
summary(GA)
loss <- function(xx,yy,zz,kk){H.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 5000, maxiter = 5000, optim = TRUE)
H.dist <- function(x1, x2) sqrt(sum((sqrt(x1) - sqrt(x2))^2))
loss <- function(xx,yy,zz,kk){H.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e2),
popSize = 5000, maxiter = 5000, optim = TRUE)
summary(GA)
loss <- function(xx,yy,zz,kk){H.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 10000, maxiter = 7500, optim = TRUE)
summary(GA)
loss <- function(xx,yy,zz,kk){R.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 10000, maxiter = 7500, optim = TRUE)
summary(GA)
R.dist <- function(x1, x2) sqrt(sum((log(x1) - log(x2))^2))
loss <- function(xx,yy,zz,kk){R.dist(toy_model(c(xx,yy,zz,kk)),obs_data)}
GA <- ga(type = "real-valued", fitness =  function(x) -loss(x[1],x[2],x[3],x[4]),
lower = c(0.001, 0.001,0.001,0.001), upper = c(1e3, 1e3,1e3,1e3),
popSize = 10000, maxiter = 7500, optim = TRUE)
summary(GA)
